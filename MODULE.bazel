"""c++ project build by bazel"""

module(
    name = "pycstl",
    version = "0.0.1",
)

#-------------------------------------------------------------------------------------
# C++
#-------------------------------------------------------------------------------------

# 1. The metadata of glog is fetched from the BCR, including its dependencies (gflags).
# 2. The `repo_name` attribute allows users to reference this dependency via the `gtest` repo name.
BOOST_VERSION = "1.87.0"

bazel_dep(name = "boost.asio", version = BOOST_VERSION + ".bcr.1")
bazel_dep(name = "boost.beast", version = BOOST_VERSION + ".bcr.1")
bazel_dep(name = "boost.property_tree", version = BOOST_VERSION)
bazel_dep(name = "boost.uuid", version = BOOST_VERSION)
bazel_dep(name = "eigen", version = "4.0.0-20241125.bcr.1")
bazel_dep(name = "fmt", version = "11.1.4")
bazel_dep(name = "gflags", version = "2.2.2")
bazel_dep(name = "glm", version = "1.0.0.bcr.1")
bazel_dep(name = "grpc", version = "1.70.1", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "nasm", version = "2.14.02")  # aom dav1d need it
bazel_dep(name = "nlohmann_json", version = "3.11.3.bcr.1")
bazel_dep(name = "platforms", version = "0.0.11")  # rules_qt need it
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")

# hiredis
bazel_dep(name = "hiredis")
git_override(
    module_name = "hiredis",
    remote = "https://github.com/1115040131/hiredis.git",
    commit = "8eddfaed5dd3567b71ac9fcb3d6045cb0552b277",
)

# mysql-connector-cpp
bazel_dep(name = "mysql-connector-cpp")
local_path_override(
    module_name = "mysql-connector-cpp",
    path = "third_party/mysql-connector-cpp",
)

# Qt6
bazel_dep(name = "rules_qt")
git_override(
    module_name = "rules_qt",
    remote = "https://github.com/Sayter99/rules_qt6.git",
    commit = "6c0124fece859b0363f0b075ae6acf6fa5db5255",
)

qt = use_extension("@rules_qt//:extensions.bzl", "qt")
qt.fetch()
use_repo(
    qt,
    "qt_linux_x86_64",
    "qt_windows_x86_64",
    "qt_mac_aarch64",
)
register_toolchains(
    "@rules_qt//tools:all",
    dev_dependency = True,
)

# SDL2
bazel_dep(name = "sdl2_gfx")
local_path_override(
    module_name = "sdl2_gfx",
    path = "third_party/sdl2_gfx",
)

#-------------------------------------------------------------------------------------
# Node.js
#-------------------------------------------------------------------------------------

bazel_dep(name = "aspect_rules_js", version = "2.3.5")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
# bazel_dep(name = "rules_nodejs", version = "6.2.0")
# node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
# node.toolchain(node_version = "16.14.2")
#################################

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir $PWD install --lockfile-only
use_repo(pnpm, "pnpm")

#-------------------------------------------------------------------------------------
# Python
#-------------------------------------------------------------------------------------

bazel_dep(name = "rules_python", version = "1.3.0")

PYTHON_VERSION = "3.12"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    ignore_root_user_error = True,
    python_version = PYTHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pycstl_deps",
    python_version = PYTHON_VERSION,
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pycstl_deps")

#-------------------------------------------------------------------------------------
# Test only
#-------------------------------------------------------------------------------------

bazel_dep(name = "googletest", version = "1.16.0.bcr.1")

# 导出 compile_commands.json
# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "f5fbd4cee671d8d908f37c83abaf70fba5928fc7",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)
